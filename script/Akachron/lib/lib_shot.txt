
task _HomeShot(int shot_, float maxTurn_){ _HomeShot(shot_, maxTurn_, GetPlayerObjectID()); }
task _HomeShot(int shot_, float maxTurn_, int target_)
{
	while(!Obj_IsDeleted(shot_) && !Obj_IsDeleted(target_))
	{
		float thCurrent = ObjMove_GetAngle(shot_);
		float thTarget = dottheta(ObjMove_GetX(shot_), ObjMove_GetY(shot_), ObjMove_GetX(target_), ObjMove_GetY(target_));
		float thNew = thCurrent + clamp(AngularDistance(thCurrent, thTarget), -maxTurn_, maxTurn_);
		ObjMove_SetAngle(shot_, thNew);
		yield;
	}
}

task _HomeShotB(int shot_, float maxTurn_, float maxSpeed_, int target_)
{
	float vx; float vy;
	float sx; float sy;
	float tx; float ty;
	float dx; float dy;
	float th; float dvx; float dvy;
	float thTravel;
	while(!Obj_IsDeleted(shot_) && !Obj_IsDeleted(target_))
	{
		vx = ObjMove_GetSpeedX(shot_);
		vy = ObjMove_GetSpeedY(shot_);
		sx = ObjMove_GetX(shot_);
		sy = ObjMove_GetY(shot_);
		tx = ObjMove_GetX(target_);
		ty = ObjMove_GetY(target_);
		dx = sx - tx;
		dy = sy - ty;
		th = dottheta(sx, sy, tx, ty);
		dvx = maxTurn_ * cos(th);
		dvy = maxTurn_ * sin(th);
		vx += dvx;
		vy += dvy;
		
		thTravel = dottheta(0, 0, vx, vy);
		vx = clamp(vx, -(|maxSpeed_ * cos(thTravel)|), (|maxSpeed_ * cos(thTravel)|));
		vy = clamp(vy, -(|maxSpeed_ * sin(thTravel)|), (|maxSpeed_ * sin(thTravel)|));
		ObjMove_SetSpeedX(shot_, clamp(vx, -maxSpeed_, maxSpeed_));
		ObjMove_SetSpeedY(shot_, clamp(vy, -maxSpeed_, maxSpeed_));
		
		yield;
	}
}



task _WrapShot(int shot_){ _WrapShot(shot_, "LRTB", 1); }
task _WrapShot(int shot_, string sides_){ _WrapShot(shot_, sides_, 99); }
task _WrapShot(int shot_, string sides_, int maxTimes_)
{
	int sx; int sy;
	bool L = contains(sides_, 'L');
	bool R = contains(sides_, 'R');
	bool T = contains(sides_, 'T');
	bool B = contains(sides_, 'B');
	
	while(!Obj_IsDeleted(shot_))
	{
		sx = ObjMove_GetX(shot_);
		sy = ObjMove_GetY(shot_);
		if((L && sx <= 0 && ObjMove_GetSpeedX(shot_) < 0) || (R && sx >= GetStgFrameWidth() && ObjMove_GetSpeedX(shot_) > 0))
		{
			ObjMove_SetX(shot_, ObjMove_GetX(shot_) % GetStgFrameWidth());
			if(maxTimes_ <= 1) return;
		}
		if((T && sy <= 0 && ObjMove_GetSpeedY(shot_) < 0) || (B && sy >= GetStgFrameHeight() && ObjMove_GetSpeedY(shot_) > 0))
		{
			ObjMove_SetY(shot_, ObjMove_GetY(shot_) % GetStgFrameHeight());
			if(maxTimes_ <= 1) return;
		}
		yield;
	}
}

task _BounceShot(int shot_){ _BounceShot(shot_, "LRTB", 99); }
task _BounceShot(int shot_, string sides_){ _BounceShot(shot_, sides_, 99); }
task _BounceShot(int shot_, string sides_, int maxTimes_)
{
	int sx; int sy;
	bool L = contains(sides_, 'L');
	bool R = contains(sides_, 'R');
	bool T = contains(sides_, 'T');
	bool B = contains(sides_, 'B');
	
	while(!Obj_IsDeleted(shot_))
	{
		sx = ObjMove_GetX(shot_);
		sy = ObjMove_GetY(shot_);
		if((L && sx <= 0 && ObjMove_GetSpeedX(shot_) < 0) || (R && sx >= GetStgFrameWidth() && ObjMove_GetSpeedX(shot_) > 0))
		{
			ObjMove_SetAngle(shot_, ReflectAngle(ObjMove_GetAngle(shot_), 90));
			if(maxTimes_ <= 1) return;
		}
		if((T && sy <= 0 && ObjMove_GetSpeedY(shot_) < 0) || (B && sy >= GetStgFrameHeight() && ObjMove_GetSpeedY(shot_) > 0))
		{
			ObjMove_SetAngle(shot_, ReflectAngle(ObjMove_GetAngle(shot_), 0));
			if(maxTimes_ <= 1) return;
		}
		yield;
	}
}





//Make shot (or other object) only visible when player gets near
task _HideObjAtRange(int shot_, float range_)
{
	while(!Obj_IsDeleted(shot_))
	{                           //300 so it hits 255 a bit early
		ObjRender_SetAlpha(shot_, 300 * (1 - clamp(GetObjectDistance(shot_, GetPlayerObjectID())/range_, 0, 1)));
		yield;
	}
}

